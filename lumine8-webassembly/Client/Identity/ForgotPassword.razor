@page "/ForgotPassword"

@inject MainProto.MainProtoClient MainClient
@inject AuthenticationService authService

<h3>Forgot Password? : Not available yet</h3>

<p>This method will clear all of your tokens</p>

<MyAlert @ref="alert"></MyAlert>

<EditForm Model="loginUser" OnValidSubmit="ChangePassword">
    <div class="form-group">
        <label for="@guids[0]">User Name</label>
        <InputText id="@guids[0]" @bind-Value="loginUser.Username" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="@guids[2]">Old Password</label>
        <InputText id="@guids[2]" @bind-Value="loginUser.Password" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="@guids[3]">Password</label>
        <InputText id="guids[3]" @bind-Value="loginUser.NewPassword" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="@guids[4]">Confirm Password</label>
        <InputText id="guids[4]" @bind-Value="loginUser.ConfirmPassword" class="form-control"></InputText>
    </div>
</EditForm>

@code {
    private LoginUser loginUser = new();
    private MyAlert alert = new();

    private List<string> guids = new();

    protected override async Task OnInitializedAsync()
    {
        guids = new List<string>();
        guids.Add(Guid.NewGuid().ToString());
        guids.Add(Guid.NewGuid().ToString());
        guids.Add(Guid.NewGuid().ToString());
        guids.Add(Guid.NewGuid().ToString());
        guids.Add(Guid.NewGuid().ToString());
    }

    private async Task ChangePassword()
    {
        try
        {
            await MainClient.ChangePasswordAsync(loginUser, authService.headers);
            alert.InvokeAlert("Password changed.", MyAlert.Alerts.Success, true);
        }
        catch(System.Exception ex)
        {
            alert.InvokeAlert("Password change failed.", MyAlert.Alerts.Danger, true);
        }
    }
}
