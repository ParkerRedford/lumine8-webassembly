@page "/Account/ChangePassword"
@layout AccountLayout

@inject MainProto.MainProtoClient MainClient
@inject AuthenticationService authService

<PageTitle>Change Password</PageTitle>

<EditForm Model="authService.loginUser" OnValidSubmit="BeginChangePassword">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <label for="@guids[0]">Old Password</label>
    <InputText id="@guids[0]" @bind-Value="authService.loginUser.Password" class="form-control" type="password" required></InputText>

    <label for="@guids[1]">New Password</label>
    <InputText id="@guids[1]" @bind-Value="authService.loginUser.NewPassword" class="form-control" type="password"></InputText>

    <label for="@guids[2]">Confirm Password</label>
    <InputText id="@guids[2]" @bind-Value="authService.loginUser.ConfirmPassword" class="form-control" type="password"></InputText>

    <input type="submit" value="Change" class="btn btn-success" />

    @if (!string.IsNullOrWhiteSpace(message))
    {
        <p>@message</p>
    }
</EditForm>

@code {
    private string message = "";
    private List<string> guids = new();

    protected override async Task OnInitializedAsync()
    {
        guids = new List<string>();
        guids.Add(Guid.NewGuid().ToString());
        guids.Add(Guid.NewGuid().ToString());
        guids.Add(Guid.NewGuid().ToString());
    }

    private async Task BeginChangePassword()
    {
        try
        {
            var change = await MainClient.ChangePasswordAsync(authService.loginUser, authService.headers);
            message = $"Password changed {DateTime.Now}";
        }
        catch(System.Exception ex)
        {
            message = $"Error changing password {DateTime.Now}";
        }
    }
}
