@inject MainProto.MainProtoClient MainClient
@inject NavigationManager navigationManager

@inject AuthenticationService authService

<style>
    .form-group {
        background-color: initial !important;
    }
</style>

@{
    var i = 0;
    foreach (var p in placesLived)
    {
        var j = i;
        <div class="d-flex flex-row ms-auto my-1">
            @if (p.Value)
            {
                <button class="btn btn-info me-2" @onclick="() => placesLived[p.Key] = false">
                    <RadzenIcon Icon="visibility" Style="display: flex !important;" />
                </button>
            }
            else
            {
                <button class="btn btn-info me-2" @onclick="() => placesLived[p.Key] = true">
                    <RadzenIcon Icon="visibility_off" Style="display: flex !important;" />
                </button>
            }
        </div>

        if (p.Value)
        {
            LocationInfo info = locationInfos.Where(x => x.PlaceLivedId == p.Key.PlaceLivedId).FirstOrDefault();

            List<string> guids = new();
            for (int k = 0; 8 >= k; k++)
                guids.Add(Guid.NewGuid().ToString());

            var to = p.Key.To.ToDateTime();
            var from = p.Key.From.ToDateTime();

            <div class="card card-header p-2" style="border-radius: 1rem !important;">
                <EditForm Model="p" OnValidSubmit="OnUpdate">
                    @if (!disable)
                    {
                        <button type="button" @onclick="DeleteLived" class="btn btn-danger me-auto mb-1" style="width: max-content;">
                            <RadzenIcon Icon="delete" Style="display: flex !important;" />
                        </button>

                        <button type="button" @onclick="SelectForPetition" class="btn btn-info" style="width: max-content;">
                            <RadzenIcon Icon="done" Style="display: flex !important;" />
                        </button>

                        async Task SelectForPetition()
                        {
                            await MainClient.UpdateAddressForPetitionAsync(p.Key, authService.headers);
                            alerts[j].InvokeAlert("You have selected this address for petitioning", MyAlert.Alerts.Info, true);
                        }

                        async Task DeleteLived()
                        {
                            placesLived.Remove(await MainClient.DeletePlaceAsync(p.Key, authService.headers));
                            alerts.Remove(alerts[j]);
                        }
                    }

                    <div class="list-group-item d-flex flex-column">
                        <label for="@guids[0]">Country</label>
                        @if (disable)
                        {
                            var n = model.Countries.Where(x => x.Id == p.Key.CountryId).FirstOrDefault();
                            <p>@n.Name</p>
                        }
                        else
                        {
                            <select id="@guids[0]" @bind="p.Key.CountryId" @oninput="GetStates" class="form-select">
                                @foreach (var c in model.Countries)
                                {
                                    <option @key="c.Id" value="@c.Id">@(c.Name)</option>
                                }
                            </select>

                            async Task GetStates(ChangeEventArgs e)
                            {
                                p.Key.CountryId = int.Parse(e.Value.ToString());

                                var sid = await MainClient.GetStatesAsync(new IdNumber { Id = int.Parse(e.Value.ToString()) });
                                info.cities.Clear();
                                info.states = sid.States.ToList();

                                states.AddRange(sid.States);
                                states = states.Distinct().ToList();
                            }
                        }
                    </div>
                    <div class="list-group-item d-flex flex-column">
                        <label for="@guids[1]">State</label>
                        @if (disable)
                        {
                            var n = states.Where(x => x.Id == p.Key.CityId).FirstOrDefault();
                            <p>@n.Name</p>
                        }
                        else
                        {
                            <select id="@guids[1]" @bind="p.Key.StateId" @oninput="GetCities" class="form-select">
                                @foreach (var s in info.states)
                                {
                                    <option value="@s.Id">@(s.Name)</option>
                                }
                            </select>

                            async Task GetCities(ChangeEventArgs e)
                            {
                                p.Key.StateId = int.Parse(e.Value.ToString());

                                var sid = await MainClient.GetCitiesAsync(new IdNumber { Id = int.Parse(e.Value.ToString()) });
                                info.cities = sid.Cities.ToList();

                                cities.AddRange(sid.Cities);
                                cities = cities.Distinct().ToList();
                            }
                        }
                    </div>
                    <div class="list-group-item d-flex flex-column">
                        <label for="@guids[2]">City</label>
                        @if (disable)
                        {
                            var n = cities.Where(x => x.Id == p.Key.CityId).FirstOrDefault();
                            <p>@n.Name</p>
                        }
                        else
                        {
                            <InputSelect id="@guids[2]" @bind-Value="p.Key.CityId" class="form-select">
                                @foreach (var c in info.cities)
                                {
                                    <option value="@c.Id">@(c.Name)</option>
                                }
                            </InputSelect>
                        }
                    </div>
                    
                    <div class="list-group form-group">
                        <div class="list-group-item d-flex flex-column">
                            <label for="@guids[3]">Street Name</label>
                            @if (disable)
                            {
                                <p>@p.Key.StreetName</p>
                            }
                            else
                            {
                                <InputText id="@guids[3]" class="form-control" @bind-Value="p.Key.StreetName"></InputText>
                            }
                        </div>
                        <div class="list-group-item d-flex flex-column" style="border-radius: 1rem 1rem 0 0;">
                            <label for="@guids[4]">County</label>
                            @if (disable)
                            {
                                <p>@p.Key.County</p>
                            }
                            else
                            {
                                <InputText id="@guids[4]" class="form-control" @bind-Value="@p.Key.County"></InputText>
                            }
                        </div>

                        <div class="list-group-item d-flex flex-column" style="border-radius: 0 0 1rem 1rem;">
                            <label for="@guids[5]">Postal Code</label>
                            @if (disable)
                            {
                                <p>@p.Key.PostalCode</p>
                            }
                            else
                            {
                                <InputText id="@guids[5]" class="form-control" @bind-Value="@p.Key.PostalCode" disabled="@disable">@p.Key.PostalCode</InputText>
                            }
                        </div>
                    </div>
                    <div class="card-columns d-flex mt-2">
                        <div>
                            <label for="@guids[6]">From</label>
                            <InputDate id="@guids[6]" class="form-control" @bind-Value="to" disabled="@disable"></InputDate>
                        </div>
                        <div>
                            <label for="@guids[7]">To</label>
                            <InputDate id="@guids[7]" class="form-control" @bind-Value="from" disabled="@(disable || p.Key.Current)"></InputDate>
                        </div>
                        <div>
                            <label for="@guids[8]">Current</label>
                            <InputCheckbox id="@guids[8]" @bind-Value="p.Key.Current" class="form-control" disabled="@disable"></InputCheckbox>
                        </div>
                    </div>
                    @if (!disable)
                    {
                        <button class="btn btn-success d-flex mt-2 ms-auto" style="width: max-content;" type="submit">
                            <RadzenIcon Icon="save" Style="display: flex !important;" />
                        </button>
                    }
                </EditForm>

                <MyAlert @ref="alerts[j]" Class="mt-2" />
            </div>

            async Task OnUpdate()
            {
                p.Key.To = Timestamp.FromDateTime(to);
                p.Key.From = Timestamp.FromDateTime(from);

                await MainClient.UpdatePlaceAsync(p.Key, authService.headers);
                alerts[j].InvokeAlert($"Updated", MyAlert.Alerts.Success, true);
            }
        }
        i++;
    }
}

@if (!disable)
{
    <span class="m-2">
        <button @onclick="CreatePlace" class="btn btn-success">
            <RadzenIcon Icon="add_circle" Style="display: flex !important;" />
        </button>
    </span>
}

@code {
    [Parameter] public SharedUser User { get; set; }
    [Parameter] public bool disable { get; set; }

    public class LocationInfo
    {
        public string PlaceLivedId { get; set; }
        public List<State> states { get; set; }
        public List<City> cities { get; set; }
    }

    private List<LocationInfo> locationInfos = new();

    public List<State> states = new();
    public List<City> cities = new();

    private Dictionary<Lived, bool> placesLived = new();
    private List<MyAlert> alerts = new();

    private PlacesLivedResponse model = new();

    protected override async Task OnInitializedAsync()
    {
        model = await MainClient.GetPlacesLivedAsync(new Id { Id_ = User.Id });

        foreach (var p in model.PlacesLived)
        {
            states = model.States.Where(x => x.CountryId == p.CountryId).ToList();
            cities = model.Cities.Where(x => states.Any(y => y.Id == x.StateId)).ToList();
            locationInfos.Add(new LocationInfo { PlaceLivedId = p.PlaceLivedId, states = states, cities = cities });
            placesLived.Add(p, false);
            alerts.Add(new MyAlert());
        }

        StateHasChanged();
    }

    private async Task CreatePlace()
    {
        var p = await MainClient.CreatePlaceAsync(new Lived { UserId = User.Id, From = new Timestamp(), To = new Timestamp() });
        placesLived.Add(p, true);
        locationInfos.Add(new LocationInfo { PlaceLivedId = p.PlaceLivedId });
        alerts.Add(new MyAlert());
    }
}
